CREATE TABLE TIPO_ASENTAMIENTO(
   ID_TIPO_ASENTAMIENTO NUMBER(3) PRIMARY KEY,
   DESCRIPCION VARCHAR(50)
);
CREATE TABLE PAIS(
   ID_PAIS NUMBER(4) PRIMARY KEY,
   NOMBRE VARCHAR(100) 
);

CREATE TABLE ESTADO(
   ID_ESTADO NUMBER(3),
   ID_PAIS NUMBER(4),
   NOMBRE VARCHAR(100), 
   PRIMARY KEY (ID_ESTADO, ID_PAIS),
   FOREIGN KEY (ID_PAIS) REFERENCES PAIS
);

CREATE TABLE USUARIO(
    ID_USUARIO NUMBER(10) PRIMARY KEY,
    ID_FACEBOOK VARCHAR(50)UNIQUE,
    PRIMER_NOMBRE VARCHAR(25) NOT NULL,
    AP_PATERNO VARCHAR(35),
    AP_MATERNO VARCHAR(35),
    GENERO VARCHAR(1),
    FECHA_NACIMIENTO DATE,
    EMAIL VARCHAR(120) UNIQUE,
    CELULAR VARCHAR(20),
    TELEFONO VARCHAR(20),
    FECHA_CREACION DATE,
    CONTRASENA VARCHAR(50),
    ESTATUS NUMBER(2),
    CONTRASENA_TEMPORAL VARCHAR(50),
    RFC VARCHAR (13),
    ROL NUMBER(1)
);

CREATE TABLE METODO_PAGO(
    ID_METODO_PAGO NUMBER(3) PRIMARY KEY,
    NOMBRE VARCHAR(30),
    ABREVIACION VARCHAR(12),
    IMAGEN VARCHAR(300),
    TIPO VARCHAR(1)    
);


CREATE TABLE MUNICIPIO(
   ID_MUNICIPIO NUMBER(5),
   NOMBRE VARCHAR(150),
   ID_ESTADO NUMBER(3) NOT NULL,
   ID_PAIS NUMBER(4),
   
   PRIMARY KEY (ID_MUNICIPIO, ID_ESTADO, ID_PAIS),
   FOREIGN KEY(ID_ESTADO, ID_PAIS) REFERENCES ESTADO(ID_ESTADO, ID_PAIS)
);

CREATE TABLE CIUDAD(
   ID_CIUDAD NUMBER(10),
   NOMBRE VARCHAR(150),
   ID_MUNICIPIO NUMBER(5),
   ID_ESTADO NUMBER(3),
   ID_PAIS NUMBER(4),
   
   PRIMARY KEY (ID_CIUDAD, ID_MUNICIPIO, ID_ESTADO, ID_PAIS),
   FOREIGN KEY(ID_MUNICIPIO, ID_ESTADO, ID_PAIS) REFERENCES MUNICIPIO (ID_MUNICIPIO, ID_ESTADO, ID_PAIS)
);

CREATE TABLE ASENTAMIENTO(
   ID_ASENTAMIENTO NUMBER(8),
   ID_TIPO_ASENTAMIENTO NUMBER(3) NOT NULL,
   ID_MUNICIPIO NUMBER(5) NOT NULL,
   ID_CIUDAD NUMBER(10),
   ID_ESTADO NUMBER(10),
   ID_PAIS NUMBER(4),
   NOMBRE VARCHAR(150),
   CODIGO_POSTAL VARCHAR(5) NOT NULL,
   
   PRIMARY KEY (ID_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, ID_PAIS),
   FOREIGN KEY (ID_MUNICIPIO, ID_ESTADO, ID_PAIS) REFERENCES MUNICIPIO(ID_MUNICIPIO, ID_ESTADO, ID_PAIS),
   FOREIGN KEY(ID_CIUDAD, ID_MUNICIPIO, ID_ESTADO, ID_PAIS)REFERENCES CIUDAD(ID_CIUDAD, ID_MUNICIPIO, ID_ESTADO, ID_PAIS),
   FOREIGN KEY(ID_TIPO_ASENTAMIENTO)REFERENCES TIPO_ASENTAMIENTO
);

CREATE TABLE METODO_PAGO_USUARIO(
    ID_METODO_PAGO_USUARIO NUMBER(11) PRIMARY KEY,
    ORDEN NUMBER(2),
    ALIAS VARCHAR(20),
    ESTATUS NUMBER(2) DEFAULT 1,
    NUMERO_CUENTA VARCHAR(512),
    NOMBRE_EN_TARJETA VARCHAR(512),
    MES_EXPIRACION VARCHAR(512),
    ANO_EXPIRACION VARCHAR(512),
    CVV VARCHAR(512),
    CVV2 VARCHAR(512),
    NIP VARCHAR(512),
    ID_USUARIO NUMBER(10) NOT NULL,
    ID_METODO_PAGO NUMBER(3) NOT NULL,
    FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO,
    FOREIGN KEY(ID_METODO_PAGO) REFERENCES METODO_PAGO    
);

CREATE TABLE DIRECCION(
    ID_DIRECCION NUMBER(12) PRIMARY KEY,
    ID_ASENTAMIENTO NUMBER(8),
    ID_MUNICIPIO NUMBER(5),
    ID_ESTADO NUMBER(3),
    ID_USUARIO NUMBER(10) NOT NULL,
    ID_PAIS NUMBER(4),
    ALIAS VARCHAR(20),
    CALLE VARCHAR(50),
    NUM_EXT VARCHAR(30),
    NUM_INT VARCHAR(30),
    ESTATUS NUMBER(2),
    FECHA_CREACION DATE,
    FOREIGN KEY(ID_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, ID_PAIS)REFERENCES ASENTAMIENTO(ID_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, ID_PAIS),
    FOREIGN KEY(ID_USUARIO)REFERENCES USUARIO
);

CREATE TABLE SESION(
    ID_SESION VARCHAR(55) PRIMARY KEY,
    FECHA_ULTIMA_COM DATE,
    FECHA_CREACION DATE,
    FECHA_FINAL DATE,
    ESTATUS NUMBER (2),
    ORIGEN NUMBER(4),
    CONT_COMUNICACION NUMBER(7),
    ID_USUARIO NUMBER(10),
    FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO
);

CREATE TABLE TIENDA(
	ID_TIENDA NUMBER(6)PRIMARY KEY,
	NOMBRE VARCHAR(500),
	IMAGEN_CARRITO VARCHAR(200),
	FECHA_CREACION DATE,
	FECHA_ULTIMA_MODIFICACION DATE,
	ESTATUS NUMBER(3),
        URL VARCHAR(200)
);
CREATE TABLE TIENDA_IMAGEN(
    ID_TIENDA_IMAGEN NUMBER(10)PRIMARY KEY,
    ID_TIENDA NUMBER(6),
    URL VARCHAR(200),
    FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA
);

CREATE TABLE CARRITO(
	ID_CARRITO NUMBER(12)PRIMARY KEY,
	ID_USUARIO NUMBER(10),
	ID_TIENDA NUMBER(6),
	FECHA_CREACION DATE,
	FECHA_ULTIMA_MODIFICACION DATE,
	FECHA_ULTIMO_ACCESO DATE,
	FECHA_FINAL DATE,
	ESTATUS NUMBER(3),
	FOREIGN KEY(ID_USUARIO)REFERENCES USUARIO,
	FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA
);

CREATE TABLE PROMOCION(
	ID_PROMOCION NUMBER(17) PRIMARY KEY,
	DESCRIPCION VARCHAR(200),
	URL VARCHAR(200),
        EXPRESION VARCHAR(200),
	ESTATUS NUMBER(3)
);

CREATE TABLE MONEDA(
	ID_MONEDA VARCHAR2(10)PRIMARY KEY,
	SIMBOLO VARCHAR2(3)
);

CREATE TABLE PRODUCTO(
	ID_PRODUCTO NUMBER(15) PRIMARY KEY,
        NOMBRE VARCHAR(500),
	DESCRIPCION VARCHAR2(2600),
	TIPO_DESCRIPCION VARCHAR2(15),
	ID_MONEDA VARCHAR2(10),
	ID_TIENDA NUMBER(6),
	FECHA_CREACION DATE,
	ESTATUS NUMBER(3),
        TIPO NUMBER(3),
        SKU VARCHAR(100),
        IMAGEN_DESTACADO VARCHAR(200),
        IMAGEN_PROMOCION VARCHAR(200),
        ORDEN_DESTACADO NUMBER(9),
        ORDEN_PROMOCION NUMBER(9),
	FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA,
	FOREIGN KEY(ID_MONEDA)REFERENCES MONEDA
);

CREATE TABLE BIEN(
    ID_BIEN NUMBER(15) PRIMARY KEY,
    EXISTENCIAS NUMBER(16),
    MAXIMO_POR_VENTA NUMBER(10),
    MINIMO_POR_VENTA NUMBER(10),
    INTERVALO_POR_INCREMENTO NUMBER(9),
    CM_EMPAQUE_LARGO NUMBER(7,2),
    CM_EMPAQUE_ALTO NUMBER(7,2),
    CM_EMPAQUE_ANCHO NUMBER(7,2),
    KG_PESO NUMBER(8,3),
    FOREIGN KEY(ID_BIEN)REFERENCES PRODUCTO
);
CREATE TABLE SERVICIO(
    ID_SERVICIO NUMBER(15)PRIMARY KEY,
    FOREIGN KEY(ID_SERVICIO)REFERENCES PRODUCTO
);

CREATE TABLE CARRITO_BIEN(
	ID_CARRITO NUMBER(12),
	ID_BIEN NUMBER(15),
	CANTIDAD NUMBER(10),
	PRIMARY KEY(ID_CARRITO,ID_BIEN),
	FOREIGN KEY(ID_CARRITO)REFERENCES CARRITO,
	FOREIGN KEY(ID_BIEN)REFERENCES BIEN
);

CREATE TABLE PRODUCTO_IMAGEN(
	ID_PRODUCTO_IMAGEN NUMBER(17) PRIMARY KEY,
	IMAGEN VARCHAR(200),
	ID_PRODUCTO NUMBER(15),
        IMAGEN_DESTACADO VARCHAR(200),
	FOREIGN KEY(ID_PRODUCTO)REFERENCES PRODUCTO
);


CREATE TABLE PROMOCION_TIENDA(
	ID_PROMOCION NUMBER(17),
	ID_TIENDA NUMBER(6),
	FECHA_VINCULACION DATE,
	PRIMARY KEY(ID_PROMOCION,ID_TIENDA),
	FOREIGN KEY(ID_PROMOCION)REFERENCES PROMOCION,
	FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA
);

CREATE TABLE PROMOCION_PRODUCTO(
	ID_PROMOCION NUMBER(17),
	ID_PRODUCTO NUMBER(15),
	FECHA_VINCULACION DATE,
	PRIMARY KEY(ID_PROMOCION,ID_PRODUCTO),
	FOREIGN KEY(ID_PRODUCTO)REFERENCES PRODUCTO,
	FOREIGN KEY(ID_PROMOCION)REFERENCES PROMOCION
);

CREATE TABLE USUARIO_TEMPORAL(
    ID_USUARIO_TEMPORAL VARCHAR(32) PRIMARY KEY,
    FECHA_CREACION DATE,
    FECHA_ULTIMA_COMUNICACION DATE
);

CREATE TABLE CARRITO_TEMPORAL(
    ID_CARRITO_TEMPORAL NUMBER(12)PRIMARY KEY,
    ID_USUARIO_TEMPORAL VARCHAR(32),
    ID_TIENDA NUMBER(6),
    FECHA_CREACION DATE,
    FECHA_ULTIMA_MODIFICACION DATE,
    FECHA_ULTIMO_ACCESO DATE,
    FECHA_FINAL DATE,
    ESTATUS NUMBER(3),
    FOREIGN KEY(ID_USUARIO_TEMPORAL)REFERENCES USUARIO_TEMPORAL,
    FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA
);

CREATE TABLE CARRITO_TEMPORAL_BIEN(
    ID_CARRITO_TEMPORAL NUMBER(12),
    ID_BIEN NUMBER(15),
    CANTIDAD NUMBER(10),
    PRIMARY KEY(ID_CARRITO_TEMPORAL,ID_BIEN),
    FOREIGN KEY(ID_CARRITO_TEMPORAL)REFERENCES CARRITO_TEMPORAL,
    FOREIGN KEY(ID_BIEN)REFERENCES BIEN
);

CREATE TABLE VENTA(
	ID_VENTA NUMBER(12) PRIMARY KEY,
	ID_METODO_PAGO_USUARIO NUMBER(11),
	ID_TIENDA NUMBER(6),
	ESTATUS NUMBER(3),
        FECHA_CREACION DATE,	
	FECHA_CARGO DATE,
	MONTO NUMERIC(16,6),
	ID_TRANSACCION VARCHAR(50),
	ID_ORDEN VARCHAR(50),
        COSTO_ENVIO NUMBER(16,6),
        TIPO NUMBER(3),
        REQUIERE_FACTURA VARCHAR(1),
	FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA,
	FOREIGN KEY(ID_METODO_PAGO_USUARIO) REFERENCES METODO_PAGO_USUARIO
);

CREATE TABLE VENTA_BIEN(
	ID_BIEN NUMBER(15),
	ID_VENTA NUMBER(12),
	CANTIDAD NUMBER(10),
	PRECIO NUMBER(16,6),
	PRIMARY KEY(ID_BIEN, ID_VENTA),
	FOREIGN KEY(ID_BIEN) REFERENCES BIEN,
	FOREIGN KEY(ID_VENTA) REFERENCES VENTA
);

CREATE TABLE VENTA_SERVICIO(
	ID_SERVICIO NUMBER(15),
	ID_VENTA NUMBER(12),
	MONTO NUMBER(16,6),
	PRIMARY KEY(ID_SERVICIO, ID_VENTA),
	FOREIGN KEY(ID_SERVICIO) REFERENCES SERVICIO,
	FOREIGN KEY(ID_VENTA) REFERENCES VENTA
);

CREATE TABLE VENTA_BIEN_PROMOCION(
	ID_VENTA_BIEN_PROMOCION NUMBER(15) PRIMARY KEY,
	ID_BIEN NUMBER(12),
	ID_VENTA NUMBER(12),
	DESCRIPCION VARCHAR(200),
	URL VARCHAR(200),
	MONTO NUMBER(16,6),
	FOREIGN KEY(ID_BIEN,ID_VENTA)REFERENCES VENTA_BIEN(ID_BIEN,ID_VENTA)
);

CREATE TABLE VENTA_SERVICIO_PROMOCION(
	ID_VENTA_SERVICIO_PROMOCION NUMBER(15) PRIMARY KEY,
	ID_SERVICIO NUMBER(12),
	ID_VENTA NUMBER(12),
	DESCRIPCION VARCHAR(200),
	URL VARCHAR(200),
	MONTO NUMBER(16,6),
	FOREIGN KEY(ID_SERVICIO,ID_VENTA)REFERENCES VENTA_SERVICIO(ID_SERVICIO,ID_VENTA)
);

CREATE TABLE DESTINATARIO_ESTATICO(
    ID_DESTINATARIO_ESTATICO NUMBER(12) PRIMARY KEY,
    ID_ASENTAMIENTO NUMBER(8),
    ID_MUNICIPIO NUMBER(5),
    ID_ESTADO NUMBER(3),
    ID_PAIS NUMBER(4),
    CALLE VARCHAR(50),
    NUM_EXT VARCHAR(30),
    NUM_INT VARCHAR(30),
    ESTADO_ENVIO NUMBER(10),
    ESTATUS NUMBER(3),
    FECHA_CREACION DATE,
    NOMBRE VARCHAR(100),
	FOREIGN KEY(ID_DESTINATARIO_ESTATICO)REFERENCES VENTA,
    FOREIGN KEY(ID_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, ID_PAIS)REFERENCES ASENTAMIENTO(ID_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, ID_PAIS)
);



CREATE TABLE MENSAJE_VENTA(
    NUMERO_MENSAJE NUMBER(4),
    ID_VENTA NUMBER(12),
    MENSAJE VARCHAR(150),
    ESTATUS_ANTERIOR NUMBER(3),
    ESTATUS_ACTUAL NUMBER(3),
    ESTATUS_PROPUESTO NUMBER(3),
    PRIMARY KEY(ID_VENTA,NUMERO_MENSAJE),
    FOREIGN KEY(ID_VENTA)REFERENCES VENTA
);

CREATE TABLE TIENDA_PROPIEDAD(
    ID_TIENDA_PROPIEDAD NUMBER(9) PRIMARY KEY,
    ID_TIENDA NUMBER(6),
    LLAVE VARCHAR(20),
    VALOR VARCHAR(300),
    FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA
);

CREATE TABLE PRODUCTO_PROPIEDAD(
    ID_PRODUCTO_PROPIEDAD NUMBER(18) PRIMARY KEY,
    ID_PRODUCTO NUMBER(15),
    LLAVE VARCHAR(20),
    VALOR VARCHAR(300),
    FOREIGN KEY(ID_PRODUCTO)REFERENCES TIENDA
);

CREATE TABLE BIEN_PROPIEDAD(
    ID_BIEN_PROPIEDAD NUMBER(18) PRIMARY KEY,
    ID_BIEN NUMBER(15),
    LLAVE VARCHAR(20),
    VALOR VARCHAR(300),
    FOREIGN KEY(ID_BIEN)REFERENCES BIEN
);

CREATE TABLE TIENDA_METODO_PAGO(
    ID_TIENDA NUMBER(6),
    ID_METODO_PAGO NUMBER(3),
    PRIMARY KEY(ID_TIENDA,ID_METODO_PAGO),
    FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA,
    FOREIGN KEY(ID_METODO_PAGO)REFERENCES METODO_PAGO
);


CREATE TABLE PRODUCTO_USUARIO(
    ID_PRODUCTO_USUARIO NUMBER(13) PRIMARY KEY,
    ID_USUARIO NUMBER(10),
    ID_PRODUCTO NUMBER(15),
    FECHA_CONSULTA DATE,
    FUENTE_LECTURA NUMBER(3),
    IDENTIFICADOR NUMBER(3),
    FOREIGN KEY(ID_USUARIO)REFERENCES USUARIO,
    FOREIGN KEY(ID_PRODUCTO)REFERENCES PRODUCTO
);


CREATE TABLE PRODUCTO_USUARIO_TEMPORAL(
    ID_PRODUCTO_USUARIO_TEMPORAL NUMBER(13) PRIMARY KEY,
    ID_USUARIO_TEMPORAL VARCHAR(32),
    ID_PRODUCTO NUMBER(15),
    FECHA_CONSULTA DATE,
    FUENTE_LECTURA NUMBER(3),
    IDENTIFICADOR NUMBER(3),
    FOREIGN KEY(ID_USUARIO_TEMPORAL)REFERENCES USUARIO_TEMPORAL,
    FOREIGN KEY(ID_PRODUCTO)REFERENCES PRODUCTO
);


CREATE TABLE PROPIEDAD_GENERAL(
    ID_PROPIEDAD_GENERAL VARCHAR(30) PRIMARY KEY,
    VALOR VARCHAR(300),
    FECHA DATE
);



CREATE TABLE SERVICIO_PROPIEDAD(
    ID_SERVICIO_PROPIEDAD NUMBER(18) PRIMARY KEY,
    ID_SERVICIO NUMBER(15),
    LLAVE VARCHAR(20),
    VALOR VARCHAR(300),
    FOREIGN KEY(ID_SERVICIO)REFERENCES SERVICIO
);

CREATE TABLE VENTA_PROPIEDAD(
    ID_VENTA_PROPIEDAD NUMBER(18) PRIMARY KEY,
    ID_VENTA NUMBER(15),
    LLAVE VARCHAR(20),
    VALOR VARCHAR(300),
    FOREIGN KEY(ID_VENTA)REFERENCES VENTA
);



CREATE TABLE CATALOGO_MAIL_VENTA(
    ID_CATALOGO_MAIL_VENTA NUMBER(8) PRIMARY KEY,
    DESCRIPCION VARCHAR(300),
    ASUNTO VARCHAR(200)
)

CREATE TABLE TIENDA_CATALOGO_MAIL_VENTA(
    ID_TIENDA NUMBER(6),
    ID_CATALOGO_MAIL_VENTA NUMBER(8),
    NOTIFICAR_CLIENTE NUMBER(3),
    PRIMARY KEY(ID_TIENDA,ID_CATALOGO_MAIL_VENTA),
    FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA,
    FOREIGN KEY(ID_CATALOGO_MAIL_VENTA) REFERENCES CATALOGO_MAIL_VENTA
);

CREATE TABLE DESTINATARIO_MAIL(
    ID_DESTINATARIO_MAIL NUMBER(8) PRIMARY KEY,
    EMAIL VARCHAR(200),
    DESCRIPCION VARCHAR(300)
);

CREATE TABLE TIENDA_MAIL_VENTA_DESTINATARIO(
    ID_TIENDA NUMBER(6),
    ID_CATALOGO_MAIL_VENTA NUMBER(8),
    ID_DESTINATARIO_MAIL NUMBER(8),
    OCURRENCIA NUMBER(3),
    PRIMARY KEY(ID_TIENDA,ID_CATALOGO_MAIL_VENTA,ID_DESTINATARIO_MAIL),
    FOREIGN KEY(ID_TIENDA)REFERENCES TIENDA,
    FOREIGN KEY(ID_CATALOGO_MAIL_VENTA)REFERENCES CATALOGO_MAIL_VENTA,
    FOREIGN KEY(ID_DESTINATARIO_MAIL)REFERENCES DESTINATARIO_MAIL
);

CREATE TABLE MENSAJE(
    ID_MENSAJE NUMBER(10)PRIMARY KEY,
    IMAGEN VARCHAR(200),
    ORDEN NUMBER(9),
    ESTATUS NUMBER(3)
);

CREATE TABLE AUTORIZACION(
    ID_AUTORIZACION NUMBER(20)PRIMARY KEY,
    ID_USUARIO NUMBER(10),
    AUTORIZACION VARCHAR(15),
    FOREIGN KEY(ID_USUARIO)REFERENCES USUARIO
);
CREATE TABLE EMAIL_TEMPLATE(
    EMAIL_TEMPLATE_ID NUMBER(10) PRIMARY KEY,
    SUBJECT VARCHAR2(200),
    TEMPLATE CLOB
);

ALTER TABLE TIENDA_CATALOGO_MAIL_VENTA
ADD EMAIL_TEMPLATE_ID NUMBER(10);

ALTER TABLE TIENDA_CATALOGO_MAIL_VENTA
ADD FOREIGN KEY(EMAIL_TEMPLATE_ID) REFERENCES EMAIL_TEMPLATE

CREATE TABLE PULL_MSG(
	PULL_MSG_ID NUMBER(10) PRIMARY KEY,
	MSG CLOB
);

ALTER TABLE USUARIO
ADD TERMS_ACEPTED NUMBER(1)

----SPRINT 1.3 VERIFICAR UNA VENTA RECURRENTE----
ALTER TABLE VENTA 
ADD (RECURRENTE NUMBER(3),
	ID_VENTA_PADRE NUMBER(12)); 
-------------------------------------------------

-- SPRINT V1.3 GUARDAR CVV Y API_VERSION DENTRO DE VENTA
ALTER TABLE VENTA 
ADD (CVV VARCHAR(50), API_VERSION VARCHAR(50));
--------------------------------------------------

--SPRINT V1.4 RELACION DE CATALOGO_PRODUCTO
CREATE TABLE CATALOGO_PRODUCTO(
	ID_CATALOGO_PRODUCTO NUMBER(10) PRIMARY KEY,
	IMAGEN VARCHAR(40),
	ESTATUS NUMBER(3),
	ORDEN NUMBER(3)	
);

CREATE TABLE CATALOGO_PAGINA(
	ID_CATALOGO_PAGINA NUMBER(10) NOT NULL,
	ID_CATALOGO_PRODUCTO NUMBER(10),
	IMAGEN VARCHAR(40),
	WIDTH VARCHAR(30),
	HEIGTH VARCHAR(30),
	PRIMARY KEY(ID_CATALOGO_PAGINA, ID_CATALOGO_PRODUCTO),
	FOREIGN KEY(ID_CATALOGO_PRODUCTO) REFERENCES CATALOGO_PRODUCTO
);

CREATE TABLE CATALOGO_PAGINA_PRODUCTO(
	ID_CATALOGO_PAGINA_PRODUCTO NUMBER(10) NOT NULL,
	ID_CATALOGO_PAGINA NUMBER(10) NOT NULL,
	ID_CATALOGO_PRODUCTO NUMBER(10),
	WIDTH VARCHAR(30),
	HEIGTH VARCHAR(30),
	X NUMBER(30),
	Y NUMBER(30),
	FOREIGN KEY(ID_CATALOGO_PAGINA, ID_CATALOGO_PRODUCTO) REFERENCES CATALOGO_PAGINA,
	FOREIGN KEY(ID_CATALOGO_PRODUCTO) REFERENCES CATALOGO_PRODUCTO,
	PRIMARY KEY(ID_CATALOGO_PAGINA_PRODUCTO, ID_CATALOGO_PAGINA, ID_CATALOGO_PRODUCTO)
);

ALTER TABLE CATALOGO_PRODUCTO ADD WIDTH VARCHAR(30);
ALTER TABLE CATALOGO_PRODUCTO ADD HEIGTH VARCHAR(30);

--- SPRINT V2.4.2/Sprint-2/PropiedadesProductos

CREATE TABLE PRODUCT_PROPERTY(
	ID_PRODUCT_PROPERTY NUMBER(10),
	ID_PRODUCTO NUMBER(15),
	NAME_PROPERTY VARCHAR(50),
	TYPE_PROPERTY VARCHAR (50),
	STATUS NUMBER(3),
	PRIMARY KEY(ID_PRODUCT_PROPERTY, ID_PRODUCTO),
	FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO
);

CREATE TABLE PRODUCT_PROPERTY_VALUES(
	ID_PRODUCT_PROPERTY_VALUES NUMBER(10),
	ID_PRODUCT_PROPERTY NUMBER(10),
	ID_PRODUCTO NUMBER(15),
	AMOUNT VARCHAR(200),
	PRICE NUMBER(16,6),
	PRIMARY KEY(ID_PRODUCT_PROPERTY_VALUES, ID_PRODUCT_PROPERTY, ID_PRODUCTO),
	FOREIGN KEY(ID_PRODUCT_PROPERTY, ID_PRODUCTO) REFERENCES PRODUCT_PROPERTY,
	FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO
);

CREATE TABLE SALE_PROPERTY_PRODUCT(
	ID_SALE_PROPERTY_PRODUCT NUMBER(10) PRIMARY KEY,
	ID_VENTA NUMBER(12),
	ID_BIEN NUMBER(15),
	ID_COMBINACION NUMBER(10), 
	TYPE_PROPS VARCHAR(250),
	VALUE_PROPS VARCHAR(500),
        TYPE_VALUES VARCHAR(250),
	PRICE_PROPS VARCHAR(250),
	QUANTITY NUMBER(10)
);



CREATE TABLE CARRITO_BIEN_PROPS(
	ID_CARRITO_BIEN_PROPS NUMBER(10) PRIMARY KEY,
	ID_CARRITO NUMBER(12),
	ID_BIEN NUMBER(15),
	ID_COMBINACION NUMBER(10), 
	TYPE_PROP VARCHAR(250),
	VALUE_PROPS VARCHAR(500),
	PRICE_PROPS VARCHAR(250),
	QUANTITY NUMBER(10)
);
ALTER TABLE CARRITO_BIEN ADD PROPS_ACT NUMBER(3);


--- SPRINT 2.4.3 BUSQUEDA DE PRODUCTOS

CREATE TABLE CATALOGO_CATEGORIA(
    ID_CATALOGO_CATEGORIA NUMBER(15) PRIMARY KEY, 
    NOMBRE VARCHAR2(500), 
    IMAGE VARCHAR2(500), 
    ESTATUS NUMBER(3), 
    TYPE VARCHAR2(500), 
    WIDTH VARCHAR2(100), 
    HEIGHT VARCHAR2(100)
);

CREATE TABLE CATALOGO_ETIQUETA(
	ID_CATALOGO_ETIQUETA NUMBER(15) PRIMARY KEY,
	NOMBRE VARCHAR(500), 
	IMAGEN VARCHAR(500),
	WIDTH VARCHAR(100),
	HEIGHT VARCHAR(100),
	MARCA VARCHAR(200),
	REV NUMBER(3)
);

CREATE TABLE PRODUCTO_CATALOGO_ETIQUETA(
	ID_PRODUCTO NUMBER(15),
	ID_CATALOGO_ETIQUETA NUMBER(15),
	PRIMARY KEY(ID_PRODUCTO, ID_CATALOGO_ETIQUETA),
	FOREIGN KEY (ID_CATALOGO_ETIQUETA) REFERENCES CATALOGO_ETIQUETA
);

CREATE TABLE PRODUCTO_DESTACADO(
	ID_PRODUCTO NUMBER(15),
	PUNTUACION NUMBER(15),
	PRIMARY KEY(ID_PRODUCTO, PUNTUACION),
	FOREIGN KEY(ID_PRODUCTO) REFERENCES PRODUCTO	
);

ALTER TABLE TIENDA ADD REV NUMBER(3)

-- MODIFICAR LA TABLA PRODUCTO IMAGEN
ALTER TABLE PRODUCTO_IMAGEN ADD WIDTH NUMBER(10);
ALTER TABLE PRODUCTO_IMAGEN ADD HEIGHT NUMBER(10);

-- MODIFICAR LA TABLA PRODUCTOS
ALTER TABLE PRODUCTO ADD ACT NUMBER(3);
UPDATE PRODUCTO SET ACT=0;

CREATE TABLE BUSQUEDA_PRODUCTO(
	ID_PRODUCTO NUMBER(15) PRIMARY KEY,
	NOMBRE VARCHAR(500),
	TIENDA VARCHAR(500),
	CATEGORIAS VARCHAR(500),
        MARCAS VARCHAR(500),
	DESCRIPCION VARCHAR(4000),
        DESTACADO NUMBER(3),
        TIPO VARCHAR(100),
	ESTATUS NUMBER(3),
	FECHA_MODIFICACION DATE,
	TIPO_OPERACION VARCHAR(100)
);

ALTER TABLE CATALOGO_PRODUCTO 
ADD NOMBRE_CATALOGO VARCHAR(300)


UPDATE CATALOGO_PRODUCTO SET HEIGTH = replace(HEIGTH, 'dp', ''), WIDTH = replace(WIDTH, 'dp', '') 
UPDATE CATALOGO_PAGINA SET HEIGTH = replace(HEIGTH, 'dp', ''), WIDTH = replace(WIDTH, 'dp', '') 
UPDATE CATALOGO_PAGINA_PRODUCTO SET HEIGTH = replace(HEIGTH, 'dp', ''), WIDTH = replace(WIDTH, 'dp', '') 

---------> Cambiar imagenes de repositorio, de 'https://s3.amazonaws.com/yappStatic/' a 'https://yappgzip.s3.amazonaws.com/' <---------

UPDATE PRODUCTO_IMAGEN  SET IMAGEN = REPLACE (IMAGEN, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/');
UPDATE TIENDA_IMAGEN ti SET ti.URL = REPLACE (ti.URL, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/');
UPDATE TIENDA t SET t.IMAGEN_CARRITO = REPLACE (t.IMAGEN_CARRITO, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/') WHERE t.ESTATUS = 1;
UPDATE PRODUCTO p SET p.IMAGEN_DESTACADO = REPLACE (p.IMAGEN_DESTACADO, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/') WHERE p.ESTATUS = 1;
UPDATE PRODUCTO p SET p.IMAGEN_PROMOCION = REPLACE (p.IMAGEN_PROMOCION, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/') WHERE p.ESTATUS = 1;
UPDATE MENSAJE m SET m.IMAGEN = REPLACE (m.IMAGEN, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/') WHERE m.ESTATUS = 1;
UPDATE CATALOGO_PRODUCTO cp SET cp.IMAGEN = REPLACE(cp.IMAGEN, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/') WHERE cp.ESTATUS = 1;
UPDATE CATALOGO_PAGINA cpag SET cpag.IMAGEN = REPLACE (cpag.IMAGEN, 'https://s3.amazonaws.com/yappStatic/', 'https://yappgzip.s3.amazonaws.com/');

-------- Capacitacion Back

CREATE TABLE ALUMNO(
	ID_ALUMNO NUMBER(10) PRIMARY KEY,
	NOMBRE VARCHAR(50),
	AP_PATERNO VARCHAR(50),
	EDAD NUMBER(30)
);

-----SPRINT 2.4.4 Cupones ------------------------

CREATE TABLE COUPON(
	ID_COUPON NUMBER(15),
	KEY_COUPON VARCHAR(50),
	TYPE_DISCOUNT VARCHAR(50),
	AVAILABILITY NUMBER(15),
	VALUE_COUPON NUMBER(15),
	STATUS NUMBER(3),
	PRIMARY KEY(ID_COUPON, KEY_COUPON)
);

ALTER TABLE VENTA ADD KEY_COUPON VARCHAR(50);

ALTER TABLE TIENDA ADD IMAGE_STORE VARCHAR(500);	

-----SPRINT 2.4.5 SUSBCRIPTION ------------------------

CREATE TABLE SUBSCRIPTION(
	ID_SUBSCRIPTION NUMBER(15) PRIMARY KEY,
	EMAIL VARCHAR(200),
	DATE_CREATION DATE,
	DATE_DROP DATE,
	STATUS NUMBER(3)
);

-----SPRINT 8 MESES SIN INTERESES (DINERO MAIL) -----------------------------

CREATE TABLE COMISION(
    ID_COMISION NUMBER(6) PRIMARY KEY,
    DESCRIPCION VARCHAR(30),
    COMISION NUMBER(10,4),
    TIPO VARCHAR(10),
    PERIODO NUMBER(3),
    EXTRA NUMBER(10,2) DEFAULT 0,
    TIPO_EXTRA VARCHAR(10),
    IVA NUMBER(10,2),
    MONEDA VARCHAR(10),
    SIMBOLO VARCHAR(10),
    COMISION_EXTRA NUMBER(6),
    SIN_INTERESES NUMBER(3),
    FOREIGN KEY(COMISION_EXTRA) REFERENCES COMISION(ID_COMISION)
);

CREATE TABLE REL_TIENDA_COMISION(
    ID_TIENDA NUMBER(6),
    ID_METODO_PAGO NUMBER(3),
    ID_BANCO NUMBER(6),
    ID_COMISION NUMBER(6),
    STATUS NUMBER(1),
    FOREIGN KEY(ID_TIENDA) REFERENCES TIENDA,
    FOREIGN KEY(ID_BANCO) REFERENCES BANCO,
    FOREIGN KEY(ID_METODO_PAGO) REFERENCES METODO_PAGO,
    FOREIGN KEY(ID_COMISION) REFERENCES COMISION,
    PRIMARY KEY(ID_TIENDA, ID_BANCO, ID_METODO_PAGO, ID_COMISION)
);

CREATE TABLE BANCO(
    ID_BANCO NUMBER(6) PRIMARY KEY,
    NOMBRE VARCHAR(30),
    LLAVE VARCHAR(30)
);+

CREATE TABLE TICKET(
    ID_TICKET NUMBER(6) PRIMARY KEY,
    ID_USUARIO NUMBER(10),
    ID_CARRITO NUMBER(12),
    ID_VENTA NUMBER(12),
    ID_COMISION NUMBER(6),
    TICKET VARCHAR(500),
    FECHA_REGISTRO DATE,
    ESTATUS NUMBER(2),
    FOREIGN KEY(ID_COMISION) REFERENCES COMISION,
    FOREIGN KEY(ID_USUARIO) REFERENCES USUARIO,
    FOREIGN KEY(ID_CARRITO) REFERENCES CARRITO,
    FOREIGN KEY(ID_VENTA) REFERENCES VENTA
);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('payment.method.dineromail', 'DINERO_MAIL', NULL);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('payment.method.amex', 'AMEX', NULL);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('iva', '16', NULL);

ALTER TABLE TIENDA_PROPIEDAD MODIFY LLAVE VARCHAR(30);
---- v1.36/sprint7-randomHomeItems ----
/*** AGREGAR LLAVES EN PROPIEDAD GENERAL ***/

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('random.items.ordered', 'default', NULL);

-----V1.36/SPRINT8-MENSAJE_GASTO_ENVIO-------
INSERT INTO tienda_propiedad (ID_TIENDA_PROPIEDAD, ID_TIENDA, LLAVE, VALOR) 
	VALUES (181, 1006, 'next.shipping', 'true');

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('message.shipping', 'Los gastos de envío serán calculados después de la compra.', NULL);


/*Tabla de etiquetas temporal*/
CREATE TABLE ETIQUETA(
ID_ETIQUETA NUMBER(10) PRIMARY KEY,
NOMBRE VARCHAR(500),
URL VARCHAR(500),
DESCRIPCION VARCHAR(500),
ID_PADRE_ETIQUETA NUMBER(10),
RAIZ NUMBER(10),
ESTATUS NUMBER(10)
);

CREATE TABLE IMAGEN_ETIQUETA(
ID_IMAGEN_ETIQUETA NUMBER(10) PRIMARY KEY,
ID_ETIQUETA NUMBER(10),
LARG VARCHAR(500),
MEDIUM VARCHAR(500),
SIDE VARCHAR(500)
);

CREATE TABLE IMAGEN_ETIQUETA_SMALL(
ID_IMAGEN_ETIQUETA_SMALL NUMBER(10) PRIMARY KEY,
ID_IMAGEN_ETIQUETA NUMBER(10),
SMALL VARCHAR(500)
);

CREATE TABLE REL_PRODUCTO_ETIQUETA(
ID_REL_PRODUCTO_ETIQUETA NUMBER(10) PRIMARY KEY,
ID_PRODUCTO NUMBER(10),
ID_ETIQUETA NUMBER(10),
);
/*Tabla de etiquetas temporal*/


-----SPRINT 1.36 INTEGRACION DE FORMAS DE PAGO EFECTIVO (OXXO)-----

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('notification.support.conekta', 'gtrejo@yappme.com,gtrejo@yappme.com', NULL);


INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('limit.minimum.by.sale.with.cuopon', '50', NULL);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('expiry_date.day.conekta.oxxo', '14', null);
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('amount.limited.conekta.oxxo', '10000', null);
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('amount.minimum.conekta.oxxo', '15', null);
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('url.logo.conekta.oxxo', 'https://s3.amazonaws.com/conekta/static/v6/assets/images/payment-oxxo.png', NULL);
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('email.cc.operaciones.ticket.oxxo', 'gtrejo@yappme.com', NULL);
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('subject.operaciones.ticket.oxxo', 'Ticket generado con exito.', NULL);
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('pay.subject.operaciones.ticket.oxxo', 'Ticket pagado con exito.', NULL);
INSERT INTO METODO_PAGO (ID_METODO_PAGO, NOMBRE, ABREVIACION, IMAGEN, TIPO) 
	VALUES (9, 'EFECTIVO_OXXO', 'OXXO', 'https://s3.amazonaws.com/conekta/static/v6/assets/images/payment-oxxo.png', 'E');
INSERT INTO TIENDA_METODO_PAGO (ID_TIENDA, ID_METODO_PAGO) 
	VALUES (1006, 9);
INSERT INTO TIENDA_METODO_PAGO (ID_TIENDA, ID_METODO_PAGO) 
	VALUES (1016, 9);
INSERT INTO TIENDA_METODO_PAGO (ID_TIENDA, ID_METODO_PAGO) 
	VALUES (1000, 9);

INSERT INTO CATALOGO_MAIL_VENTA (ID_CATALOGO_MAIL_VENTA, DESCRIPCION, ASUNTO) 
	VALUES (18, 'Notificacion de ticket oxxo a usuario.', NULL);

INSERT INTO EMAIL_TEMPLATE (EMAIL_TEMPLATE_ID, TEMPLATE, SUBJECT) 
	VALUES (17, '<html>
Hola $data.UserName te enviamos el ticket para pago via Oxxo de la tienda $data.StoreName.<br>

Datos de la Transacción:<br>
Email Usuario: $data.EmailUser<br>
Venta #: $data.SaleId<br>
Referencia: $data.ReferenceId<br>
Descripción: $data.Description<br>
Fecha de Compra: $data.CreateDateSale<br>
Método de Pago: $data.PaymentMethod<br>
Logo: <br><img src="$data.LogoOxxo"><br>
Monto de operación: $ $data.Amount<br>
Estatus de pago: $data.StatusPay<br>
Codigo de Barras:<br>
<img src="$data.CodeUrl"><br>
Número de Codigo: $data.Code<br>
Fecha de Expiración: $data.Expiry<br>
</html>
  ', 'Tu ticket ha sido generado correctamente con el #($data.SaleId).');


INSERT INTO TIENDA_CATALOGO_MAIL_VENTA (ID_TIENDA, ID_CATALOGO_MAIL_VENTA, NOTIFICAR_CLIENTE, EMAIL_TEMPLATE_ID) 
	VALUES (1016, 18, 1, 17);

INSERT INTO TIENDA_MAIL_VENTA_DESTINATARIO (ID_TIENDA, ID_CATALOGO_MAIL_VENTA, ID_DESTINATARIO_MAIL, OCURRENCIA) 
	VALUES (1016, 18, 1, 3);



INSERT INTO CATALOGO_MAIL_VENTA (ID_CATALOGO_MAIL_VENTA, DESCRIPCION, ASUNTO) 
	VALUES (19, 'Notificacion de expiracion de ticket de oxxo.', NULL);

INSERT INTO EMAIL_TEMPLATE (EMAIL_TEMPLATE_ID, TEMPLATE, SUBJECT) 
	VALUES (18, '<html>
Notificación de expiración de Ticket Oxxo del Usuario: $data.Username, de la Tienda: $data.StoreName<br>

Datos de la Transacción:<br>
Email Usuario: $data.EmailUser<br>
Venta #: $data.SaleId<br>
Referencia: $data.ReferenceId<br>
Descripción: $data.Description<br>
Fecha de Compra: $data.CreateDateSale<br>
Método de Pago: $data.PaymentMethod<br>
Logo: <br><img src="$data.LogoOxxo"><br>
Monto de operación: $ $data.Amount<br>
Estatus de pago: $data.StatusPay<br>
Codigo de Barras:<br>
<img src="$data.CodeUrl"><br>
Número de Codigo: $data.Code<br>
Fecha de Expiración: $data.Expiry<br>
</html>', 'Notificación de expiración de ticket oxxo venta #($data.SaleId).');


INSERT INTO TIENDA_CATALOGO_MAIL_VENTA (ID_TIENDA, ID_CATALOGO_MAIL_VENTA, NOTIFICAR_CLIENTE, EMAIL_TEMPLATE_ID) 
	VALUES (1016, 19, 2, 18);

INSERT INTO TIENDA_MAIL_VENTA_DESTINATARIO (ID_TIENDA, ID_CATALOGO_MAIL_VENTA, ID_DESTINATARIO_MAIL, OCURRENCIA) 
	VALUES (1016, 19, 1, 3);


/*SCRIPT SUBJECT FOR CUPON*/
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('subject.email.for.cupon.desc', 'Descuento en tu primera compra Yapp.', null);

CREATE TABLE VENTA_OXXO(
        ID_VENTA_OXXO VARCHAR(100) PRIMARY KEY,
        ID_VENTA NUMBER(12),
        LIVE_MODE VARCHAR(10),
        STATUS_PAYMENT VARCHAR(50),
        CURRENCY VARCHAR(5),
        DESCRIPTION VARCHAR(500),
        REFERENCE_ID VARCHAR(100),
        AMOUNT VARCHAR(100),
        COMMISSION VARCHAR(100),
        CHARGE_DATE_CREATE DATE,
        CHARGE_DATE_PAY DATE,
        EXPIRY_DATE_CONEKTA DATE,
        EXPIRY_DATE_YAPP DATE,
        BARCODE VARCHAR(300),
        BARCODE_URL VARCHAR(500),
        NAME_USER VARCHAR(200),
        PHONE VARCHAR (20),
        EMAIL VARCHAR (100)
        STATUS_SEND_TIKET NUMBER(3)
);

-----SPRINT 1.36 INTEGRACION DE FORMAS DE PAGO EFECTIVO (OXXO)-----

-----SPRINT 1.36 REGLAS GASTOS DE ENVIO ----

CREATE TABLE COSTO_ENVIO_TIENDA(
    ID_COSTO_ENVIO_TIENDA NUMBER(6) PRIMARY KEY,
    ID_TIENDA NUMBER(6),
    PESO_BASE NUMBER(10,2),
    PRECIO_BASE NUMBER(10,2),
    UNIDAD_EXCEDENTE NUMBER(5),
    PRECIO_EXCEDENTE NUMBER(10,2),
    FOREIGN KEY(ID_TIENDA) REFERENCES TIENDA
);

CREATE TABLE REGLA_CODIGO_POSTAL(
    CODIGO_POSTAL VARCHAR(5) PRIMARY KEY,
    VALIDO NUMBER(3),
    MONTO_EXTRA NUMBER(10,4),
    IVA NUMBER(10,4)
);

-----SPRINT 1.36 REGLAS GASTOS DE ENVIO ----

-----SPRINT 1.36 PROPIEDADES DESCUENTO FAKE POR PRODUCTO -----

--Realizar insert por cada producto que requiera descuento fake EJEMPLO
INSERT INTO USRYAPP.BIEN_PROPIEDAD (ID_BIEN_PROPIEDAD, ID_BIEN, LLAVE, VALOR) 
       VALUES (1021, 1135, 'price.offer', '908.7');
INSERT INTO USRYAPP.BIEN_PROPIEDAD (ID_BIEN_PROPIEDAD, ID_BIEN, LLAVE, VALOR) 
       VALUES (1022, 1135, 'discount', '30%');

--INSERT Comisiones AMEX y Dinero Mail
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (10, '3 meses', 5.138, '%', 3, 0, NULL, 0, 'MNX', '$', NULL, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (11, '6 meses', 7.658, '%', 3, 0, NULL, 0, 'MNX', '$', NULL, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (12, '12 meses', 14.461, '%', 3, 0, NULL, 0, 'MNX', '$', NULL, NULL);

INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (4, '3 meses', 19.13, '%', 3, 0, NULL, 16, 'MXN', '$', NULL, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (5, '6 meses', 22.57, '%', 6, 0, NULL, 16, 'MXN', '$', NULL, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (7, '9 meses', 25.75, '%', 9, 0, NULL, 16, 'MXN', '$', NULL, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (8, '12 meses', 28.68, '%', 12, 0, NULL, 16, 'MXN', '$', NULL, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (9, '18 meses', 33.87, '%', 18, 0, '+', 16, 'MXN', '$', NULL, NULL);

INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (1, '3 meses', 6.71, '%', 3, 1, '+', 16, 'MXN', '$', 10, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (2, '6 meses', 7.16, '%', 6, 1, '+', 16, 'MXN', '$', 11, NULL);
INSERT INTO "comision" (ID_COMISION, DESCRIPCION, COMISION, TIPO, PERIODO, EXTRA, TIPO_EXTRA, IVA, MONEDA, SIMBOLO, COMISION_EXTRA, SIN_INTERESES) 
	VALUES (3, '12 meses', 7.51, '%', 12, 1, '+', 16, 'MXN', '$', 12, NULL);

--INSERT BANCOS
INSERT INTO USRYAPP.BANCO (ID_BANCO, NOMBRE, LLAVE) 
       VALUES (1, 'Santander', 'MX_Santander_TC');
INSERT INTO USRYAPP.BANCO (ID_BANCO, NOMBRE, LLAVE) 
       VALUES (2, 'BBVA Bancomer', 'MX_Bancomer_TC');
INSERT INTO USRYAPP.BANCO (ID_BANCO, NOMBRE, LLAVE) 
       VALUES (3, 'IXE', 'MX_IXE_TC');
INSERT INTO USRYAPP.BANCO (ID_BANCO, NOMBRE, LLAVE) 
       VALUES (4, 'Scotia Bank', 'MX_ScotiaBank_TC');
INSERT INTO USRYAPP.BANCO (ID_BANCO, NOMBRE, LLAVE) 
       VALUES (5, 'AMEX_MCI', 'AMEX_PLANAMEX');
INSERT INTO USRYAPP.BANCO (ID_BANCO, NOMBRE, LLAVE) 
       VALUES (6, 'AMEX_MSI', 'AMEX_PLANN');

--GASTOS DE ENVIO POR TIENDA EJEMPLO

--APLICA UNICAMENTE PARA TIENDAS QUE SUS COSTOS DE GASTO DE ENVIO SEAN == 0
--EXCEPTO MARKE Y ELEKTRA BAJO CIERTO ESCENARIO
--PESO DEFAULT POR TIENDA
INSERT INTO TIENDA_PROPIEDAD (ID_TIENDA_PROPIEDAD, ID_TIENDA, LLAVE, VALOR) 
	VALUES (183, 1013, 'freight.weight.default', '5');

INSERT INTO TIENDA_PROPIEDAD (ID_TIENDA_PROPIEDAD, ID_TIENDA, LLAVE, VALOR) 
	VALUES (183, 1013, 'freight.weight.max', '5');

UPDATE TIENDA_PROPIEDAD SET VALOR = 'freightGeneralService' 
    WHERE LLAVE = 'freight.service' AND ID_TIENDA = 1013;

alter table Bien add CUBICAJE NUMBER(10,4);


-----SPRINT 1.36 PROPIEDADES DESCUENTO FAKE POR PRODUCTO -----



/*SRPINT 1.36/9 GROOMING HOME*/
INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('score.max.tag', '0.9', NULL);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('score.symmetric.tag', '0.4', NULL);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('quantity.rowitems.tag', '4', NULL);


/*SPRINT V.1.36.10/refactorResponseItem*/
ALTER TABLE PRODUCTO ADD DESCRIPCION_CORTA VARCHAR2(4000);
ALTER TABLE PRODUCTO ADD DESCRIPCION_MARKDOWN CLOB;
ALTER TABLE PRODUCTO MODIFY DESCRIPCION_MARKDOWN DEFAULT EMPTY_CLOB();


/*ACTUALIZAR EL ID 15 DEL TEMPLATE A UAT Y A PRODUCCION*/
/*CORRER SCRIPT DEL PROCEDIMIENTO ALMACENADO EN UAT Y PRODUCCION ARCHIVO TRIGGER_PATTERNS*/
UPDATE PRODUCTO SET ACT=1 WHERE ESTATUS=1

ALTER TABLE USUARIO add ACTIVE NUMBER(2) DEFAULT 0;
UPDATE usuario SET "ACTIVE" = 1;

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('user.activate.uri', 'https://ec2-50-18-230-253.us-west-1.compute.amazonaws.com:8443/Yapp/', NULL);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('user.activate.resource', 'sesion/registrar/success/', NULL);

/****************************************************************************/
/*SCRIPTS PARA CREAR UNA TABLA DE RELACION VENTA, CUPON, USUARIO*/
create table rel_sale_coupon(
ID_VENTA NUMBER(12),
ID_USUARIO NUMBER(10),
ID_COUPON NUMBER(15),
KEY_COUPON VARCHAR(50),
MONTO NUMERIC(16,6),
FOREIGN KEY (ID_VENTA) REFERENCES VENTA (ID_VENTA),
FOREIGN KEY (ID_USUARIO) REFERENCES USUARIO (ID_USUARIO),
FOREIGN KEY (ID_COUPON, KEY_COUPON) REFERENCES COUPON (ID_COUPON, KEY_COUPON)
);


INSERT INTO REL_SALE_COUPON
SELECT V.ID_VENTA, MPU.ID_USUARIO, C.ID_COUPON, C.KEY_COUPON, C.VALUE_COUPON FROM VENTA V INNER JOIN METODO_PAGO_USUARIO MPU 
ON V.ID_METODO_PAGO_USUARIO=MPU.ID_METODO_PAGO_USUARIO INNER JOIN COUPON C ON V.KEY_COUPON=C.KEY_COUPON


/*CAMBIAR EL MONTO MINIMO DE $30.00 A $50.00 POR DINERO MAIL*/
select * from USRYAPP.PROPIEDAD_GENERAL WHERE ID_PROPIEDAD_GENERAL = 'limit.minimum.by.sale.with.cuopon';
UPDATE PROPIEDAD_GENERAL SET VALOR = 50 WHERE ID_PROPIEDAD_GENERAL = 'limit.minimum.by.sale.with.cuopon';

INSERT INTO propiedad_general (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
       VALUES ('message.coupon', 'Tu compra minima debe de ser por un monto de ${monto}. Su saldo disponible en cupón es de ${coupon}.', NULL);

INSERT INTO propiedad_general (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
      VALUES ('message.coupon.zero', 'Tu cupón tiene un saldo a favor de ${coupon} para tu siguiente compra.', NULL);


/*AGREGANDO NUEVA FORMA DE PAGO NO APLICA*/
INSERT INTO METODO_PAGO (ID_METODO_PAGO, NOMBRE, ABREVIACION, IMAGEN, TIPO) 
	VALUES (11, 'NO APLICA', 'NA', NULL, 'E');

INSERT INTO TIENDA_METODO_PAGO
SELECT DISTINCT(ID_TIENDA),'11' FROM TIENDA_METODO_PAGO;

/*ACTUALIZAR TEMPLATE CON ID_7 AL CATALOGO EMAILS_TEMPLATES*/

/* Sprint v1.36.11/sortFilterItem se generan 2 tablas para el ordenamiento y rango de precios en base */

CREATE TABLE CATALOGO_ORDENAMIENTO_PRODUCTO(
    ID_CATALOGO_ORDENAMIENTO  NUMBER(15) PRIMARY KEY,
    DESCRIPCION VARCHAR2(200),
    CAMPO VARCHAR2(200),
    ORDENAMIENTO VARCHAR2(200),
    STATUS NUMBER(10)
);

CREATE TABLE CATALOGO_RANGO_PRECIO_PRODUCTO(
    ID_CATALOGO_RANGO_PRECIO NUMBER(15) PRIMARY KEY,
    DESCRIPCION VARCHAR2(200),
    DESDE VARCHAR2(200),
    HASTA VARCHAR2(200),
    STATUS NUMBER(10)
);


/*DISPARADOR QUE ACTUALIZA LA FECHA DEL PRODUCTO CUANDO EL PRECIO CAMBIA Y/O SU INVENTARIO*/
CREATE OR REPLACE 
TRIGGER UPDATE_DATE_PRODUCTO AFTER
  UPDATE ON BIEN_PROPIEDAD FOR EACH ROW
  BEGIN
  UPDATE PRODUCTO SET FECHA_CREACION = SYSDATE WHERE ID_PRODUCTO = :NEW.ID_BIEN;
  END UPDATE_DATE_PRODUCTO;

/*AGREGAR UNA REFERENCIA A LA TABLA PRODUCTO*/
ALTER TABLE PRODUCTO_CATALOGO_ETIQUETA
ADD CONSTRAINT FK_PROD_ETQ
  FOREIGN KEY (ID_PRODUCTO)
  REFERENCES PRODUCTO(ID_PRODUCTO);

/*
CATEGORIAS 
*/

alter table catalogo_etiqueta add ID_CATALOGO_ETIQUETA_PADRE NUMBER(15);
ALTER TABLE catalogo_etiqueta
ADD CONSTRAINT id_catalogo_etiqueta_padre
   FOREIGN KEY (ID_CATALOGO_ETIQUETA_PADRE)
   REFERENCES catalogo_etiqueta (ID_CATALOGO_ETIQUETA);

alter table catalogo_etiqueta add ID_TIENDA NUMBER(6);
ALTER TABLE catalogo_etiqueta
ADD CONSTRAINT catalogo_etiqueta_id_tienda
   FOREIGN KEY (ID_TIENDA)
   REFERENCES TIENDA (ID_TIENDA);

create table catalogo_etiqueta_propiedad(
    ID_catalogo_etiqueta_propiedad NUMBER(15) PRIMARY KEY,
    ID_CATALOGO_ETIQUETA NUMBER(15),
    LLAVE VARCHAR(20),
    VALOR VARCHAR(300),
    FOREIGN KEY(ID_CATALOGO_ETIQUETA) REFERENCES catalogo_etiqueta (ID_CATALOGO_ETIQUETA)
);

alter table catalogo_etiqueta add SPECIAL NUMBER(3);
ALTER TABLE CATALOGO_ETIQUETA ADD DESCRIPCION VARCHAR2(500);
ALTER TABLE CATALOGO_ETIQUETA ADD URL VARCHAR2(500);

UPDATE CATALOGO_ETIQUETA SET NOMBRE = INITCAP(NOMBRE);
SELECT * FROM CATALOGO_ETIQUETA where nombre like '% De %';
SELECT * FROM CATALOGO_ETIQUETA where nombre like '% Y %';


ALTER TABLE CATALOGO_ETIQUETA ADD TIPO NUMBER(3);

/* Custom Store */

CREATE TABLE TIENDA_PERSONALIZADA(
    ID_TIENDA_PERSONALIZADA NUMBER(6),
    FOOTER VARCHAR2(4000),
    HEADER VARCHAR2(4000),
    ESTATUS NUMBER(3),
    PRIMARY KEY(ID_TIENDA_PERSONALIZADA),
    FOREIGN KEY (ID_TIENDA_PERSONALIZADA) REFERENCES TIENDA (ID_TIENDA)
);

CREATE TABLE TIENDA_PERSONALIZADA_PAGINA(
    ID_TIENDA_PERSONALIZADA_PAGINA NUMBER(10),
    ID_TIENDA_PERSONALIZADA NUMBER(6),
    URL VARCHAR2(400), 
    PAGINA CLOB,
    ORDEN NUMBER(3),
    ESTATUS NUMBER(3),
    PRIMARY KEY(ID_TIENDA_PERSONALIZADA_PAGINA),
    FOREIGN KEY (ID_TIENDA_PERSONALIZADA) REFERENCES TIENDA_PERSONALIZADA (ID_TIENDA_PERSONALIZADA)
);


CREATE TABLE TIENDA_PERSONALIZADA_PROPIEDAD(
    ID_TIENDA_PERSONALIZADA NUMBER(6),
    LLAVE VARCHAR2(100), 
    VALOR VARCHAR2(500),
    FOREIGN KEY (ID_TIENDA_PERSONALIZADA) REFERENCES TIENDA_PERSONALIZADA (ID_TIENDA_PERSONALIZADA)
);

/*ACTUALIZAR EL SUBJECT DE SOLICITUD DE PEDIDO CON ID_TEMPLATE 11*/
#($data.IdVenta).
/*ACTUALIZAR TEMPLATES PARA HABILITAR BORDER CON PROPIEDAD COLOR*/
ID_TEMPLATES (13,7,9,11,12)

CREATE TABLE PRODUCTO_PROMOCION_PROPIEDAD(
    ID_PROMOCION_PROPIEDAD NUMBER(6),
    LLAVE VARCHAR2(30), 
    VALOR VARCHAR2(500),
    ESTATUS NUMBER(3),
    FOREIGN KEY (ID_PROMOCION_PROPIEDAD) REFERENCES PRODUCTO (ID_PRODUCTO)
);


/*PROPIEDADES CSS PARA HEDAER Y FOOTER*/
CREATE TABLE EMAIL_TEMPLATE_PROPIEDAD(
    ID_EMAIL_TEMPLATE NUMBER(10),
    ID_TIENDA NUMBER(6),
    LLAVE VARCHAR2(100),
    VALOR VARCHAR2(4000),
    FOREIGN KEY (ID_EMAIL_TEMPLATE) REFERENCES EMAIL_TEMPLATE (EMAIL_TEMPLATE_ID),
    FOREIGN KEY (ID_TIENDA) REFERENCES TIENDA_PERSONALIZADA (ID_TIENDA_PERSONALIZADA)
);


/*MDIFICACIONES A LA BD PARA INTEGRAR EL SERVICIO DE BANCOS*/
ALTER TABLE BANCO 
ADD ESTATUS NUMBER(3);

ALTER TABLE METODO_PAGO_USUARIO
ADD (
	ID_DIRECCION NUMBER(12),
	ID_BANCO NUMBER(6)
);

ALTER TABLE METODO_PAGO_USUARIO 
ADD (
	CONSTRAINT MPUDIRECCIONFK
	FOREIGN KEY (ID_DIRECCION)
	REFERENCES DIRECCION(ID_DIRECCION),
	
	CONSTRAINT MPUBANCOFK
	FOREIGN KEY (ID_BANCO)
	REFERENCES BANCO(ID_BANCO)
);

/* Se agrega columna de estatus a la tabla categoria etiqueta */

ALTER TABLE CATALOGO_ETIQUETA ADD ESTATUS NUMBER(3);
UPDATE CATALOGO_ETIQUETA SET ESTATUS = 1;

ALTER TABLE CATALOGO_ETIQUETA ADD ORDEN NUMBER(3);

/*CAMBIOS DE CONEKTA A MESES SIN INTERERES*/
ALTER TABLE
   METODO_PAGO_USUARIO
add
   (
   TOKEN_CONEKTA VARCHAR(200),  
   TIPO_TARJETA VARCHAR(100),
   MARCA VARCHAR(100),
   CATEGORIA_TARJETA VARCHAR(100)
   );
   
/* Se agrega tabla para emails de envio no recurrente */
   
   CREATE TABLE EMAIL_CUSTOM(
	    EMAIL_CUSTOM_ID NUMBER(10) PRIMARY KEY,
	    LLAVE VARCHAR(50),
	    SUBJECT VARCHAR2(200),
	    TEMPLATE CLOB
	);

/* TABLA PARA DEFINIR NUEVAS REGLAS DE GATOS DE ENVIO */
CREATE TABLE REL_TIENDA_CODIGO_POSTAL(
    ID_TIENDA NUMBER(6),
    CODIGO_POSTAL NUMBER(6),
    FOREIGN KEY(ID_TIENDA) REFERENCES TIENDA,
    PRIMARY KEY (ID_TIENDA, CODIGO_POSTAL)
);


/*SCRIPT PARA GENERAR ITEM_UPDATE*/
CREATE TABLE TEMP_ITEM_PRICE(
    ID_ITEM NUMBER(15),
    BEFORE_PRICE NUMBER(15,2),
    AFTER_PRICE NUMBER(15,2),
    STATUS NUMBER(1)
);

INSERT INTO PROPIEDAD_GENERAL (ID_PROPIEDAD_GENERAL, VALOR, FECHA) 
	VALUES ('notification.price.item.user', 'true', null);


CREATE OR REPLACE TRIGGER ITEM_PRICE AFTER
  INSERT OR
  UPDATE ON BIEN_PROPIEDAD FOR EACH ROW DECLARE PRICE_ITEM VARCHAR2(50);
  KEY          VARCHAR(250);
  FIND         NUMBER(3) := 0;
  PRICE_BEFORE NUMBER    := 0;
  BEGIN
    KEY        := :NEW.LLAVE;
    PRICE_ITEM := :NEW.VALOR;
    SELECT AFTER_PRICE
    INTO PRICE_BEFORE
    FROM TEMP_ITEM_PRICE
    WHERE ID_ITEM =:NEW.ID_BIEN;
    SELECT COUNT(*) INTO FIND FROM TEMP_ITEM_PRICE WHERE ID_ITEM =:NEW.ID_BIEN;
    IF INSERTING THEN
      IF (KEY='price.in_base' AND FIND=0) THEN
        INSERT
        INTO TEMP_ITEM_PRICE
          (
            ID_ITEM,
            BEFORE_PRICE,
            AFTER_PRICE,
            STATUS
          )
          VALUES
          (
            :NEW.ID_BIEN,
            PRICE_ITEM,
            PRICE_ITEM,
            0
          );
      ELSIF(KEY='price.in_base' AND FIND>0) THEN
        UPDATE TEMP_ITEM_PRICE
        SET AFTER_PRICE=PRICE_ITEM,
          BEFORE_PRICE = PRICE_ITEM,
          STATUS       =0
        WHERE ID_ITEM  =:NEW.ID_BIEN;
      END IF;
    ELSIF UPDATING THEN
      IF (KEY='price.in_base' AND FIND>0) THEN
        UPDATE TEMP_ITEM_PRICE
        SET AFTER_PRICE=PRICE_ITEM,
          BEFORE_PRICE = PRICE_BEFORE,
          STATUS       =1
        WHERE ID_ITEM  =:NEW.ID_BIEN;
      ELSIF (KEY       ='price.in_base' AND FIND=0) THEN
        INSERT
        INTO TEMP_ITEM_PRICE
          (
            ID_ITEM,
            BEFORE_PRICE,
            AFTER_PRICE,
            STATUS
          )
          VALUES
          (
            :NEW.ID_BIEN,
            PRICE_ITEM,
            PRICE_ITEM,
            0
          );
      END IF;
    END IF;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
    IF(:NEW.LLAVE='price.in_base') THEN
      INSERT
      INTO TEMP_ITEM_PRICE
        (
          ID_ITEM,
          BEFORE_PRICE,
          AFTER_PRICE,
          STATUS
        )
        VALUES
        (
          :NEW.ID_BIEN,
          :NEW.VALOR,
          :NEW.VALOR,
          0
        );
    END IF;
  END ITEM_PRICE;


insert into EMAIL_CUSTOM (EMAIL_CUSTOM_ID,LLAVE,SUBJECT,TEMPLATE) 
  values (2,'notification.email.item.price','Nuevo precio de tus productos en Yapp.',NULL);
/*SCRIPT PARA GENERAR ITEM_UPDATE*/